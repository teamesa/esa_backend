spring:
  datasource:
    url: jdbc:mysql://ls-80a31ed8e39fcc2579db65f4f2c9dc2ce150c573.c9ioyzhqhcag.ap-northeast-2.rds.amazonaws.com/summer?allowPublicKeyRetrieval=true&useSSL=false
    driver-class-name: com.mysql.jdbc.Driver
    username: ${my.database.username}
    password: ${my.database.password}
  jpa:
    open-in-view: false
    generate-ddl: false
    show-sql: true
    hibernate:
      ddl-auto: validate
      naming:
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      use-new-id-generator-mappings: false
    properties:
      hibernate:
        type:
          descriptor:
            sql: trace
        user_sql_comments: true
        format_sql: true

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  flyway:
    enabled: false
    baseline-on-migrate: true
    baseline-version: 0
  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: ${client.id}
            client-secret: ${client.pw}
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}" # (== http://localhost:8080/login/oauth2/code/naver)
            authorization-grant-type: authorization_code
            scope: email, profile_image, gender, id, birthyear, mobile, birthday
            client-name: Naver
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
app:
  auth:
    tokenSecret: ${token.secret}
    tokenExpirationMsec: ${token.expiration.mesc}
  oauth2:
    authorizedRedirectDomain: kilometer.app

logging:
  config: classpath:log4j2.xml

cloud:
  aws:
    s3:
      bucket: kilometer-image
      folderName: api
    region:
      static: ap-northeast-2
    stack:
      auto: false
    credentials:
      accessKey: ${s3.accessKey}
      secretKey: ${s3.secretKey}